# # Завдання 1: Основи HTTP
# #
# # Поясніть, що таке протокол HTTP і для чого він використовується в веб-розробці. Розкажіть про основні методи HTTP, такі як GET, POST, PUT і DELETE.
#
# Що таке протокол HTTP?
# HTTP (HyperText Transfer Protocol) — це протокол прикладного рівня, який використовується для передачі даних у
# всесвітній павутині (World Wide Web). Він визначає правила взаємодії між клієнтом (наприклад, веб-браузером) і
# сервером (де зберігаються веб-ресурси). За допомогою HTTP клієнт надсилає запити до сервера, а сервер відповідає,
# надаючи потрібну інформацію (наприклад, HTML-сторінки, файли чи дані).
#
# HTTP використовується в веб-розробці для:
#
# Обміну інформацією між клієнтською частиною (front-end) і серверною частиною (back-end).
# Виконання CRUD-операцій (Create, Read, Update, Delete) з ресурсами.
# Передачі даних між веб-застосунками та серверними API.
# Основні методи HTTP
# GET
#
# Використовується для отримання даних із сервера.
# Дані передаються у вигляді параметрів у URL (наприклад, example.com/api/resource?id=1).
# Безпечний метод (не змінює стан сервера).
# Ідпотентний (повторний запит не змінює результату).
# Приклад: Отримання списку статей або завантаження веб-сторінки.
# Приклад HTTP-запиту:
#
# vbnet

# GET /api/articles HTTP/1.1
# Host: example.com
# POST
#
# Використовується для надсилання даних на сервер і створення нових ресурсів.
# Дані зазвичай передаються в тілі запиту.
# Не є ідпотентним (повторний запит може створити кілька копій ресурсу).
# Приклад: Створення нового облікового запису або публікація коментаря.
# Приклад HTTP-запиту:
#
# bash
# Copy
# Edit
# POST /api/users HTTP/1.1
# Host: example.com
# Content-Type: application/json
#
# {
#   "name": "John Doe",
#   "email": "john@example.com"
# }
# PUT
#
# Використовується для оновлення або створення ресурсу на сервері.
# Ідпотентний метод (повторні запити мають однаковий ефект).
# Приклад: Оновлення профілю користувача або зміна статусу завдання.
# Приклад HTTP-запиту:
#
# bash
# Copy
# Edit
# PUT /api/users/1 HTTP/1.1
# Host: example.com
# Content-Type: application/json
#
# {
#   "name": "John Updated",
#   "email": "john.updated@example.com"
# }
# DELETE
#
# Використовується для видалення ресурсу на сервері.
# Ідпотентний (повторний запит не змінює результату, якщо ресурс вже видалено).
# Приклад: Видалення статті або запису з бази даних.
# Приклад HTTP-запиту:
#
# swift
# Copy
# Edit
# DELETE /api/users/1 HTTP/1.1
# Host: example.com
# Інші методи HTTP
# HEAD: Аналогічний до GET, але сервер повертає лише заголовки без тіла відповіді.
# PATCH: Використовується для часткового оновлення ресурсу.
# OPTIONS: Дозволяє клієнту дізнатися, які методи підтримуються сервером.
# Особливості HTTP
# HTTP — це статичний протокол: кожен запит є незалежним і не зберігає стану між запитами (у разі потреби для цього використовуються cookies або сесії).
# HTTP працює на основі клієнт-серверної моделі.
# Найпоширеніша версія — HTTP/1.1, але зараз активно використовується HTTP/2 і розвивається HTTP/3 (заснований на протоколі QUIC).
# Ці знання є основою для веб-розробки, API-дизайну та побудови сучасних веб-застосунків.
#
#
#
#
#
#
#
# You said:
# протокол QUIC
# ChatGPT said:
# QUIC (Quick UDP Internet Connections) — це сучасний мережевий транспортний протокол, розроблений Google для покращення швидкості, надійності та безпеки інтернет-з’єднань. Він заснований на протоколі UDP (User Datagram Protocol) і вирішує багато недоліків традиційного TCP (Transmission Control Protocol).
#
# QUIC використовується, зокрема, для реалізації HTTP/3, що є останньою версією HTTP.
#
# Основні характеристики QUIC
# Побудований на основі UDP
# QUIC працює поверх UDP, що дозволяє уникати деяких обмежень TCP, таких як тривале встановлення з'єднання. UDP легкий і швидкий, а QUIC додає до нього надійність та контроль.
#
# Швидке встановлення з'єднання
# QUIC об'єднує кілька етапів TCP-з'єднання та TLS-шифрування в один крок. Завдяки цьому час встановлення з'єднання значно скорочується.
#
# Вбудоване шифрування
# Шифрування є обов'язковою частиною QUIC. Він інтегрує TLS 1.3, що робить з'єднання не тільки швидким, але й безпечним.
#
# Мультиплексування потоків
# QUIC підтримує одночасну передачу кількох потоків даних без ризику блокування (на відміну від TCP). У разі втрати пакета він не блокує інші потоки, що робить з'єднання ефективнішим.
#
# Менший вплив на втрати пакетів
# Завдяки своїй архітектурі, QUIC значно краще працює в умовах нестабільних мереж, таких як мобільний інтернет чи Wi-Fi, де втрата пакетів — часте явище.
#
# Мобільність
# QUIC дозволяє зберігати з'єднання навіть при зміні IP-адреси або мережі (наприклад, коли ви переходите з Wi-Fi на мобільний інтернет).
#
# Переваги QUIC
# Швидше завантаження сторінок і відео: Завдяки зменшенню затримок QUIC робить веб-сайти та потокове відео швидшими.
# Краща робота в умовах високої затримки: QUIC оптимізований для мереж із високими затримками (наприклад, супутниковий інтернет).
# Енергоефективність: Швидше встановлення з'єднань означає менше споживання ресурсів на мобільних пристроях.
# Застосування QUIC
# QUIC уже активно використовується багатьма великими компаніями та сервісами:
#
# Google: Основні сервіси Google (Gmail, YouTube) використовують QUIC для покращення продуктивності.
# HTTP/3: QUIC є базою для протоколу HTTP/3, який дедалі більше застосовується для сучасних веб-застосунків.
# Браузери: Сучасні браузери, такі як Google Chrome, Microsoft Edge і Mozilla Firefox, підтримують HTTP/3 і QUIC.
# Як QUIC порівнюється з TCP + HTTP/2?
# Характеристика	QUIC (HTTP/3)	TCP (HTTP/2)
# Транспортний протокол	UDP	TCP
# Швидкість встановлення	Дуже швидке (1 крок)	Повільніше (3 кроки)
# Мультиплексування	Без блокувань	Ризик блокувань
# Шифрування	Вбудоване (TLS 1.3)	Необов'язкове
# Стійкість до втрат	Висока	Низька
# Недоліки QUIC
# Складність реалізації: Через високу інтеграцію різних рівнів (UDP, TLS, HTTP/3) реалізація QUIC складніша.
# Сумісність: Оскільки він працює поверх UDP, його підтримка залежить від налаштувань мережі (наприклад, деякі брандмауери можуть блокувати UDP).
# Ресурси: Через шифрування та інші оптимізації QUIC може вимагати більше ресурсів серверів.
# Висновок
# # QUIC — це сучасний протокол, який дозволяє зробити інтернет-з'єднання швидшим, безпечнішим і надійнішим. Він поступово замінює TCP у багатьох сценаріях і є майбутнім стандартом для веб-комунікацій.